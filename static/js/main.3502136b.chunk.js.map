{"version":3,"sources":["TodoCreateForm.js","TodoItem.js","TodoCreateList.js","App.js","serviceWorker.js","index.js"],"names":["TodoCreateForm","props","useState","inputValue","setInputValue","className","value","onChange","e","target","type","onClick","create","TodoItem","el","handleDone","deleteItem","update","edit","setEdit","title","inputTitle","setInputTitle","id","done","TodoCreateList","list","map","key","App","setList","newItem","Math","random","updatedList","delList","filter","newList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mLA2BeA,MAxBf,SAAwBC,GAAQ,IAAD,EAGSC,mBAAS,IAHlB,mBAGpBC,EAHoB,KAGRC,EAHQ,KAc3B,OACI,6BACI,6BACA,6CACA,2BAAOC,UAAU,2CAA2CC,MAAOH,EAAYI,SAbjE,SAACC,GACnBJ,EAAcI,EAAEC,OAAOH,UAanB,4BAAQI,KAAK,SAASL,UAAU,sBAAsBM,QAAS,kBATnEV,EAAMW,OAAOT,QACbC,EAAc,MAQV,aCwBGS,MA5Cf,SAAkBZ,GAAQ,IACfa,EAAsCb,EAAtCa,GAAIC,EAAkCd,EAAlCc,WAAYC,EAAsBf,EAAtBe,WAAYC,EAAUhB,EAAVgB,OADd,EAEGf,oBAAS,GAFZ,mBAEdgB,EAFc,KAERC,EAFQ,OAGejB,mBAASY,EAAGM,OAH3B,mBAGdC,EAHc,KAGFC,EAHE,KAmBrB,OAAIJ,EAEI,6BACI,2BAAOZ,MAAOe,EAAYd,SAjBhB,SAAAC,GAClBc,EAAcd,EAAEC,OAAOH,UAiBf,4BAAQD,UAAU,qCAAqCM,QAAS,WAV3D,IAACY,IAU0ET,EAAGS,GAT3FN,EAAOM,EAAIF,GAEXF,GAAQ,KAOA,SAKJ,6BACML,EAAGU,KAAQ,6BAAMV,EAAGM,OAAeN,EAAGM,MACxC,4BAAQf,UAAU,qCAAqCM,QArBhD,WACfQ,GAAQ,KAoBA,QACGL,EAAGU,KAEF,4BAAQnB,UAAU,qCACVM,QAAS,kBAAMI,EAAWD,EAAGS,IAAI,KADzC,UAFU,4BAAQlB,UAAU,qCACVM,QAAS,kBAAMI,EAAWD,EAAGS,IAAI,KADzC,QAId,4BAAQlB,UAAU,qCACVM,QAAS,kBAAMK,EAAWF,EAAGS,MADrC,YCrBDE,MAbf,SAAwBxB,GAEpB,OAEI,yBAAKI,UAAU,aACX,6BACA,4BACKJ,EAAMyB,KAAKC,KAAI,SAAAb,GAAE,OAAI,wBAAIc,IAAKd,EAAGS,IAAI,kBAAC,EAAD,CAAUT,GAAIA,EAAIC,WAAYd,EAAMc,WAAYC,WAAYf,EAAMe,WAAYC,OAAQhB,EAAMgB,gBCoDnIY,MAzDf,WAEI,IAFW,EAQa3B,mBANJ,CAChB,CAACqB,GAAI,EAAGH,MAAO,kBAAmBI,MAAM,GACxC,CAACD,GAAI,EAAGH,MAAO,gBAAiBI,MAAM,GACtC,CAACD,GAAI,EAAGH,MAAO,2BAA4BI,MAAM,KAL1C,mBAQJE,EARI,KAQEI,EARF,KA+CX,OACI,yBAAKzB,UAAU,iCACX,wCACA,kBAAC,EAAD,CAAgBO,OAxCT,SAAAQ,GACX,IAAMW,EAAU,CACZR,GAAoB,GAAhBS,KAAKC,SACTb,MAAOA,EACPI,MAAM,GAGJU,EAAW,sBAAOR,GAAP,CAAaK,IAC9BD,EAAQI,MAiCJ,kBAAC,EAAD,CAAgBR,KAAMA,EAAMV,WATjB,SAACO,GAChB,IAAMY,EAAUT,EAAKU,QAAO,SAAAtB,GAAE,OAAIA,EAAGS,KAAOA,KAC5CO,EAAQK,IAOgDpB,WAnBzC,SAACQ,EAAIC,GACpB,IAAMa,EAAUX,EAAKC,KAAI,SAAAb,GAIrB,OAHIA,EAAGS,KAAOA,IACVT,EAAGU,KAAOA,GAEPV,KAEXgB,EAAQO,IAYwEpB,OA7BrE,SAACM,EAAIH,GAChB,IAAMiB,EAAUX,EAAKC,KAAI,SAAAb,GAIrB,OAHIA,EAAGS,KAAOA,IACVT,EAAGM,MAAQA,GAERN,KAEXgB,EAAQO,QCtBIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3502136b.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\n\nfunction TodoCreateForm(props) {\n\n\n    const [inputValue, setInputValue] = useState('');\n\n    const inputOnChange = (e) => {\n        setInputValue(e.target.value)\n    };\n\n    const onCreate = () => {\n        props.create(inputValue);\n        setInputValue('')\n    }\n\n    return (\n        <div>\n            <br/>\n            <h5>Add New Item:</h5>\n            <input className=\"form-inline navbar navbar-light sm-light\" value={inputValue} onChange={inputOnChange}/>\n            <button type=\"button\" className=\"btn btn-success m-2\" onClick={() => onCreate(inputValue)}> Create</button>\n        </div>\n    );\n}\n\nexport default TodoCreateForm;\n","import React, {useState} from 'react';\n\nfunction TodoItem(props) {\n    const {el, handleDone, deleteItem, update} = props;\n    const [edit, setEdit] = useState(false);\n    const [inputTitle, setInputTitle] = useState(el.title);\n\n    const inputOnChange = e => {\n        setInputTitle(e.target.value)\n    };\n\n    const handleEdit = () => {\n        setEdit(true);\n    }\n\n    const onUpdate = (id) => {\n        update(id, inputTitle);\n        //setInputTitle('')\n        setEdit(false);\n    }\n\n    if (edit) {\n        return (\n            <div>\n                <input value={inputTitle} onChange={inputOnChange} />\n                <button className=\"btn btn-outline-warning btn-sm m-2\" onClick={() => {onUpdate(el.id)}}>Save</button>\n            </div>\n        );\n    } else {\n        return (\n            <div>\n                {(el.done) ? <del>{el.title}</del> : el.title}\n                <button className=\"btn btn-outline-success btn-sm m-2\" onClick={handleEdit}>Edit</button>\n                {(!el.done) ? <button className=\"btn btn-outline-success btn-sm m-2\"\n                                      onClick={() => handleDone(el.id, true)}>Done</button> :\n                    <button className=\"btn btn-outline-success btn-sm m-2\"\n                            onClick={() => handleDone(el.id, false)}>Undone</button>}\n                <button className=\"btn btn-outline-success btn-sm m-2\"\n                        onClick={() => deleteItem(el.id)}>Delete\n                </button>\n            </div>\n        )\n    }\n\n}\n\nexport default TodoItem;\n","import React from 'react';\nimport TodoItem from \"./TodoItem\";\n\nfunction TodoCreateList(props) {\n\n    return (\n\n        <div className=\"container\">\n            <br/>\n            <ol>\n                {props.list.map(el => <li key={el.id}><TodoItem el={el} handleDone={props.handleDone} deleteItem={props.deleteItem} update={props.update}/></li>)}\n            </ol>\n        </div>\n    );\n}\n\nexport default TodoCreateList;\n","import React, {useState} from 'react';\nimport TodoCreateForm from \"./TodoCreateForm\";\nimport TodoCreateList from \"./TodoCreateList\";\n\n\nfunction App() {\n\n    const initialList = [\n        {id: 1, title: 'do the homework', done: false},\n        {id: 2, title: 'walk with dog', done: false},\n        {id: 3, title: 'prepare the presentation', done: false}\n    ]\n\n    const [list, setList] = useState(initialList)\n\n    const create = title => {\n        const newItem = {\n            id: Math.random() * 10,\n            title: title,\n            done: false,\n        }\n\n        const updatedList = [...list, newItem];\n        setList(updatedList);\n\n    }\n\n    const update = (id, title) => {\n        const newList = list.map(el => {\n            if (el.id === id) {\n                el.title = title;\n            }\n            return el;\n        })\n        setList(newList);\n    }\n\n    const handleDone = (id, done) => {\n        const newList = list.map(el => {\n            if (el.id === id) {\n                el.done = done;\n            }\n            return el;\n        })\n        setList(newList);\n    }\n\n    const deleteItem = (id) => {\n        const delList = list.filter(el => el.id !== id);\n        setList(delList);\n    }\n\n    return (\n        <div className=\"d-flex justify-content-center\">\n            <h3>TodoList</h3>\n            <TodoCreateForm create={create}/>\n            <TodoCreateList list={list} deleteItem={deleteItem} handleDone={handleDone} update={update}/>\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}